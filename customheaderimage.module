<?php

/**
* Implements hook_init().
*/
function customheaderimage_init() {
	drupal_add_css(drupal_get_path('module', 'customheaderimage') .
    	'/css/customheaderimage_style.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  //Below is for testing purposes
  customheaderimage_add_rule('node/1', '/sites/default/files/bookpurchase_1.jpg');
}

/**
 * Implements hook_menu().
 */
function customheaderimage_menu() {
  // Module settings.
  $items['admin/config/customheaderimage'] = array(
    'title' => 'Custom Header Image',
    'description' => 'Configuration for path specific header imagesn',
    'page callback' => 'customheaderimage_display_pathspecific',
    'access arguments' => array('administer customheaderimage'),
    'file' => 'customheaderimage.admin.inc',
    'file path' => drupal_get_path('module', 'customheaderimage'),
  );
  $items['admin/config/customheaderimage/default'] = array(
    'title' => 'Path Specific',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/customheaderimage/global'] = array(
    'title' => 'Global',
    'description' => 'Configuration for global default headers',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'customheaderimage_display_global',
    'access arguments' => array('administer customheaderimage'),
    'file' => 'customheaderimage.admin.inc',
    'file path' => drupal_get_path('module', 'customheaderimage'),
  );
  $items['admin/config/customheaderimage/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit the header image associated with this path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('customheaderimage_edit_image_form'),
    'access callback' => TRUE,
    'file' => 'customheaderimage.admin.inc',
    'file path' => drupal_get_path('module', 'customheaderimage'),
  );
  return $items;
}

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
//Functions in this block for testing and will be moved later
//to css processing file
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
/**
 * This function will be called on the image upload form submit
 * It will add the rule to the css when its not there or update
 * when it's different
 * @param  [string] $page_path [path to page we are checking]
 * @param  [string] $image     [path to image uploaded]
 * @return [boolean]            [True if added. False for error]
 */
  function customheaderimage_add_rule($page_path, $image) {
    $path = drupal_get_path('module', 'customheaderimage').'/css/customheaderimage_style.css';

    if(stristr($page_path, 'node')) {
      //Set up page css styles ex: page-node-2
      $nid = customheaderimage_get_nid_from_path($page_path);
      $class = "\n.page-node-$nid";
    }
    else {
      //Set up view css styles ex: page-path-to-view
      $page_path = str_replace('/', '-', $page_path);
      $class = "\n.page-$page_path";
    }
    $style = " #header { background-image: url('$image'); }";
    $image_path = customheaderimage_check_rule($class, $path);
    if($image_path === FALSE) {
      //No image path means that the css rule does not exist yet
      if(file_put_contents($path, $class.$style, FILE_APPEND)) {
        drupal_set_message('Added CSS Style');
      }
      else {
        drupal_set_message('Error adding CSS style', 'error');
      }
    }
    else {
      //rule already exists
      //update path
      dpm($image_path);
    }
  }
  /**
   * Checks if rule already exists by checking if the class already
   * exists in the CSS file
   * @param  [string] $class [class to check]
   * @return [string]        [img path]
   */
  function customheaderimage_check_rule($class, $file_path) {
    $file = file_get_contents($file_path);
    if(stristr($file, $class)) {
      //File already has rule
      ////.page-node-1 #header\{ background-image: url\('([a-z/_0-9.]+)
      $string = preg_match(
                  "|$class #header\{ background-image: url\('([a-z/_0-9.]+)|"
                  , $file, $matches);
      $image_path = $matches[1];
      return $image_path;
    }
    return FALSE;
  }

//Function here termorarily because it is in the admin inc and we are using
//it for checking the css
  function customheaderimage_get_nid_from_path($string) {
    $string = explode('/', $string);
    $string = array_reverse($string);
    return $string['0'];
  }
//////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
/**
 * Implements hook_permission().
 */
function customheaderimage_permission() {
  return array(
    'administer customheaderimage' => array(
      'title' => t('Administer Custom Header Images'),
      'description' => t('Perform administration tasks for Custom Header Image module.'),
    ),
  );
}
